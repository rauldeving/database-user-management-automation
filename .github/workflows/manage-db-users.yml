name: Manage Database Users

on:
  workflow_dispatch:
    inputs:
      enviroment:  
        description: "Choose the enviroment"
        required: true
        default: "development"
        type: choice
        options:
          - production
          - development
          - staging  
   
jobs:
  manage-db-users:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
 
#Configure AWS credentials: 2 options:

#OPTION 1:

      # - name: Configure AWS credentials 
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.aws-region }} 

#OPTION 2
#this is a role without policies, with the ability to assume another role 

      - name: Configure AWS Credentials using OpenID Connect
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ eu-central-1 }}
          role-session-name: "UserManagementSession"

      - name: Assume Role in ${{ github.event.inputs.enviroment }}
        id: assume_role
        run: |
          CREDS=$(aws sts assume-role --role-arn ${{ vars.AWS_TARGET_ROLE }} --role-session-name "GithubSession")

          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r .Credentials.AccessKeyId)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r .Credentials.SecretAccessKey)" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r .Credentials.SessionToken)" >> $GITHUB_ENV 

      - name: Install MySQL & PostgreSQL clients
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Run database user management script
        run: |
          python manage_users.py ${{ github.event.inputs.enviroment }}
